/**
请实现一个函数用来匹配包含'. '和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串"aaa"与模式"a.a"和"ab*ac*a"匹配，但与"aa.a"和"ab*a"均不匹配。

示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:

输入:
s = "aa"
p = "a*"
输出: true
解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
示例 3:

输入:
s = "ab"
p = ".*"
输出: true
解释: ".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
示例 4:

输入:
s = "aab"
p = "c*a*b"
输出: true
解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
示例 5:

输入:
s = "mississippi"
p = "mis*is*p*."
输出: false
s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母以及字符 . 和 *，无连续的 '*'。

 */

var isMatch = function (s, p) {
  // 定义dp[i][j] 表示s的前i个和p的前j个是否能匹配
  const n = s.length;
  const m = p.length;
  const dp = new Array(n + 1).fill(0).map(() => new Array(m + 1).fill(false));

  // 初始化状态
  dp[0][0] = true; // 如果s和p长度都是0，那么可以匹配
  dp[0][1] = false; // 如果p长度为1，那么不可能是*，匹配失败
  for (let i = 2; i <= m; i++) {
    // 否则就判断，如果p的第i位是*的话，他就可以把第i-1位和自己抹除，那么就等于dp[0][i-2]
    if (p[i - 1] === "*") {
      dp[0][i] = dp[0][i - 2];
    }
  }

  for (let i = 1; i <= n; i++) {
    for (let j = 1; j <= m; j++) {
      // 如果p的第j位不是*
      if (p[j - 1] !== "*") {
        // 如果第i，j位对应相同，或者第j位是.  ，那么第i，j位就可以抹除，只需要看他们前面是否是可匹配
        if (p[j - 1] === s[i - 1] || p[j - 1] == ".") {
          dp[i][j] = dp[i - 1][j - 1];
        }
      } else {
        // 第j-1（*前面的那个字符）和第i个不匹配，就用*将第j-1位去掉
        if (p[j - 2] !== s[i - 1] && p[j - 2] !== ".") {
          dp[i][j] = dp[i][j - 2];
        } else {
          // * 匹配0个，抹除自身和第j位
          // 1个,抹除自身
          // 多个,抹除第i位
          dp[i][j] = dp[i][j - 2] || dp[i][j - 1] || dp[i - 1][j];
        }
      }
    }
  }
  return dp[n][m];
};

isMatch("aa", "a*");
